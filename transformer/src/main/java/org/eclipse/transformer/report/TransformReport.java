/********************************************************************************
 * Copyright (c) 2020 Contributors to the Eclipse Foundation
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
 * which is available at https://www.apache.org/licenses/LICENSE-2.0.
 *
 * SPDX-License-Identifier: (EPL-2.0 OR Apache-2.0)
 ********************************************************************************/

package org.eclipse.transformer.report;

import java.io.IOException;
import java.io.PrintWriter;

import org.eclipse.transformer.action.Action;
import org.eclipse.transformer.action.Changes;
import org.eclipse.transformer.TransformException;

public interface TransformReport {
	/**
	 * Answer a title for this report.
	 *
	 * @return A title for this report.
	 */
	String getTitle();

	/**
	 * Set the path to which the report will be written.
	 *
	 * @param reportPath The output path for this report.
	 *
	 * @throws TransformException Thrown if the output path cannot be used.
	 */
	void setOutput(String reportPath) throws TransformException;
	
	/**
	 * Answer the output path of this report.
	 *
	 * @return The output path of this report.
	 */
	String getOutput();

	/**
	 * Write this report to its output.
	 *
	 * @throws IOException Thrown if the write fails.
	 */
	void emit() throws IOException;
	
	/**
	 * Write this report to a print writer.  The output path
	 * will not be used.
	 *
	 * @param writer The print writer which will receive the report.
	 *
	 * @throws IOException Thrown if the write fails.
	 */
	void emit(PrintWriter writer) throws IOException;

	//

	/**
	 * Initialize data gathering for the reporter.
	 * 
	 * @throws TransformException Thrown if an error occurs
	 *     during initialization.
	 */
	void init() throws TransformException;

	/**
	 * Complete data gathering for the reporter.
	 * 
	 * @throws TransformException Thrown if an error occurs
	 *     during completion.
	 */
	void complete() throws TransformException;

	//

	/**
	 * Begin gathering data for a specified action.
	 *
	 * @param action The action which is starting.
	 * @param initialName The name of the resource which is being processed.
	 */
	void begin(Action action, String initialName);

	/**
	 * End gathering data for a specified action.
	 *
	 * @param action The action which is ending.
	 * @param changes Changes recorded by the action.
	 */
	void end(Action action, Changes changes);

	//

	/**
	 * Process initial data generated by an action.
	 *
	 * This must be used between a call to {@link #begin(Action, String)}
	 * and a call to {@link #end(Action, Changes)}, and before
	 * the call to {@link #processFinalData(Object)}.
	 *
	 * @param initialData The initial data being processed.
	 */
	void processInitialData(Object initialData);

	/**
	 * Process final data generated by an action.
	 *
	 * This must be used between a call to {@link #begin(Action, String)}
	 * and a call to {@link #end(Action, Changes)}, and after
	 * the call to {@link #processInitialData(Object)}.
	 *
	 * @param finalData The final data being processed.
	 * 
	 * @return The initial data which was generated.
	 */
	Object processFinalData(Object finalData);
}
